import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import { ChatController } from './controllers/chat.controller';
import { rateLimiterMiddleware, securityLogger } from './middleware/rateLimiter';
import { securityMiddleware, ipValidationMiddleware } from './middleware/security.middleware';
import { logger } from './utils/logger';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

logger.info('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

const app = express();
const port = process.env.PORT || 3000;
const isDevelopment = process.env.NODE_ENV === 'development';

logger.info('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  crossOriginEmbedderPolicy: false
}));

logger.info('üõ°Ô∏è Helmet –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
const corsOptions = {
  origin: isDevelopment 
    ? ['http://localhost:5173', 'http://localhost:3000']
    : process.env.CORS_ORIGIN?.split(',') || false,
  credentials: true,
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
};

app.use(cors(corsOptions));

logger.info('üåê CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json({ 
  limit: '1mb',
  strict: true
}));

app.use(express.urlencoded({ 
  extended: true, 
  limit: '1mb'
}));

logger.info('üìù JSON middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(securityLogger);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(securityMiddleware);
app.use(ipValidationMiddleware);

logger.info('üîç Security middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
logger.info('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ ChatController...');
try {
  const chatController = new ChatController();
  logger.info('‚úÖ ChatController —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–±–µ–∑ rate limiting)
  app.get('/health', chatController.healthCheck);
  app.get('/stats', chatController.getStats);

  // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —á–∞—Ç–∞ (—Å rate limiting)
  app.post('/api/chat/start', chatController.startChat);
  app.post('/api/chat/message', rateLimiterMiddleware, chatController.sendMessage);

  // AG-UI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint
  app.post('/awp', rateLimiterMiddleware, chatController.runAgent);

  logger.info('üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

} catch (error: any) {
  logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ChatController:', {
    message: error.message,
    stack: error.stack
  });
  throw error;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 404
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  logger.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, {
    stack: err.stack,
    url: req.url,
    method: req.method,
    ip: req.ip
  });

  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  logger.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', {
    reason: reason?.message || reason,
    stack: reason?.stack
  });
  console.error('UNHANDLED REJECTION:', reason);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error: Error) => {
  logger.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', {
    message: error.message,
    stack: error.stack
  });
  console.error('UNCAUGHT EXCEPTION:', error);
  
  // Graceful shutdown
  process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  logger.info(`üìù Environment: ${process.env.NODE_ENV || 'development'}`);
  logger.info(`üîí CORS origins: ${JSON.stringify(corsOptions.origin)}`);
  
  if (isDevelopment) {
    logger.info(`üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:`);
    logger.info(`   POST /api/chat/start - –ù–∞—á–∞—Ç—å —á–∞—Ç`);
    logger.info(`   POST /api/chat/message - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`);
    logger.info(`   POST /awp - AG-UI endpoint`);
    logger.info(`   GET  /health - Health check`);
    logger.info(`   GET  /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
  }
}).on('error', (error: any) => {
  logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
    message: error.message,
    stack: error.stack,
    code: error.code
  });
  console.error('SERVER ERROR:', error);
});

logger.info('üîö –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');

export default app; 